from django.shortcuts import render

# Create your views here.
from reportlab.pdfgen import canvas
from django.http import HttpResponse
from rest_framework.views import APIView
from rest_framework.parsers import JSONParser
from reportlab.pdfbase.ttfonts import TTFont 
from reportlab.pdfbase import pdfmetrics 
from reportlab.lib import colors 
from django.conf import settings
import os

class GeneratePDF(APIView):
    parser_classes = [JSONParser]

    def post(self, request, *args, **kwargs):
        documentTitle = 'Model Result'
        header = "Bone wellness -Everything for Your Bone Health"
        footer1 = "Scan to visit our website for more informations."
        footer2 = "Stay Strong,Stay Independent: Proactively Combat Osteoporosis!"
        title_line1 = 'Osteoporosis'
        title_line2 = 'Risk Assessment Report'

        data = request.data
        textTitle = "Your Input:"
        textLines = [
            f"Having CAD (Coronary Artery Disease): {'Yes' if data['CAD'] == 1 else 'No'}",  
            f"Had fractures before: {'Yes' if data['fracture'] == 1 else 'No'}", 
            f"Consume alchohol: {'Yes' if data['alcohol'] == 1 else 'No'}", 
            f"Having COPD (Chronic Obstructive Pulmonary Disease): {'Yes' if data['COPD'] == 1 else 'No'}",  
            f"Age: {'65 and above' if data['age'] == 1 else 'Under 65'}", 
        ]

        subtitle1 = "Your Probability:"
        subtitle2 = f'{data.get('probability', 'N/A')}'
        subtitle3 = "Your Result:"
        subtitle4 = data['result'][:9]
        subtitle5 = data['result'][10:-53]
        subtitle6 = data['result'][-52:]
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="report.pdf"'
        chartTitle = "The following graph shows the weight of the input features."
        disclaimer1 = "Disclaimer"
        disclaimer2 = "This tool should not be used for medical diagnosis."
        disclaimer3 = "The predictions generated by this model are based solely on the provided data and"
        disclaimer4 = "should not be considered as a substitute for professional medical advice, diagnosis, or treatment."
        disclaimer5 = "Always consult with a qualified healthcare provider"
        disclaimer6 = "for accurate medical assessments and recommendations."

        p = canvas.Canvas(response)
        p.setTitle(documentTitle) 

        p.setFont("Times-Roman", 10)
        p.drawCentredString(300, 834, header)

        p.setFont("Times-Bold", 24)
        p.drawCentredString(300, 770, title_line1)
        
        p.drawCentredString(300, 740, title_line2)

        p.line(30, 710, 550, 710) 

        # p.setFillColorRGB(0, 0, 255) 
        p.setFont("Times-Bold", 16) 
        p.drawCentredString(290, 680, subtitle1) 
        if subtitle5 == "DOES":
            p.setFillColor("orange")  
        else:
            p.setFillColor("blue")  
        p.setFont("Times-Bold", 16) 
        p.drawCentredString(290, 665, subtitle2) 
        p.setFillColorRGB(0, 0, 0) 
        p.setFont("Times-Bold", 16) 
        p.drawCentredString(290, 635, subtitle3) 
        p.setFont("Times-Roman", 16) 
        p.drawCentredString(290, 620, subtitle4) 
        if subtitle5 == "DOES":
            p.setFillColor("orange")  
        else:
            p.setFillColor("blue") 
        p.setFont("Times-Bold", 16) 
        p.drawCentredString(290, 605, subtitle5) 
        p.setFillColorRGB(0, 0, 0) 
        p.setFont("Times-Roman", 16) 
        p.drawCentredString(290, 590, subtitle6) 
        
        p.line(30, 570, 550, 570) 

        p.setFont("Times-Bold", 14) 
        p.drawCentredString(290, 550, textTitle) 

        text = p.beginText(40, 535) 
        text.setFont("Times-Roman", 14) 
        text.setFillColor(colors.black) 
        for line in textLines: 
            text.textLine(line) 
        p.drawText(text) 

        p.line(30, 440, 550, 440) 

        p.setFont("Times-Bold", 16)
        p.drawCentredString(300, 420, chartTitle)

        image_path1 = os.path.join(settings.BASE_DIR, 'generatepdf', 'barchart.png')
        p.drawInlineImage(image_path1, 34, 270, width=512, height=128)

        p.line(30, 250, 550, 250) 

        p.setFont("Times-Bold", 16)
        p.drawCentredString(300, 230, disclaimer1)
        p.setFont("Times-Roman", 14)
        p.drawCentredString(300, 215, disclaimer2)
        p.setFont("Times-Roman", 14)
        p.drawCentredString(300, 200, disclaimer3)
        p.setFont("Times-Roman", 14)
        p.drawCentredString(300, 185, disclaimer4)
        p.setFont("Times-Roman", 14)
        p.drawCentredString(300, 170, disclaimer5)
        p.setFont("Times-Roman", 14)
        p.drawCentredString(300, 155, disclaimer6)

        

        image_path1 = os.path.join(settings.BASE_DIR, 'generatepdf', 'qrcode.png')
        p.drawInlineImage(image_path1, 250, 30, width=100, height=100)

        p.setFont("Times-Roman", 10)
        p.drawCentredString(300, 20, footer1)

        p.setFont("Times-Roman", 10)
        p.drawCentredString(300, 8, footer2)

        # p.drawString(100, 800, f"CAD: {data['CAD']}")
        # p.drawString(100, 780, f"Fracture: {data['fracture']}")
        # p.drawString(100, 760, f"Alcohol: {data['alcohol']}")
        # p.drawString(100, 740, f"COPD: {data['COPD']}")
        # p.drawString(100, 720, f"Age: {data['age']}")
        # p.drawString(100, 700, f"Result: {data['result']}")
        # p.drawString(100, 680, f"Probability: {data.get('probability', 'N/A')}") 
        p.showPage()
        p.save()
        return response

